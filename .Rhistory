qnorm(0.10, 21, 5)
library(DAAG)
qt(0.025,df=90)
sum(dbinom(4:20,20,0.1))
dbinom(2, 10, 0.1)
dbinom(2, 10, 0.2)
dbinom(3, 15, 0.1)
dbinom(3, 15, 0.2)
library(dataset)
library(datasets)
with(airquality, plot(Wind, Ozone))
plot(Wind, Ozone, data = airquality)
plot(airquality$Wind, airquality$Ozone, data = airquality)
plot(airquality$Wind, airquality$Ozone)
warnings()
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
?points
?lines()
?lpoints
?lpoints()
library(lattice)
?lpoints()
?points()
?lines()
?axis()
?lpoints()
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
SN = c(1:100, 1:100, 1:100, 1:100)
class = c(rep("A1", 100), rep("B2", 100), rep("C3", 100), rep("D4", 100))
myvar = rnorm(400)
mydf = data.frame(SN, class, myvar)
head(mydf)
mydf
names(mydf)
dcast(mydf, SN ~ class)
library(reshape2)
dcast(mydf, SN ~ class)
mydf
df2<-dcast(mydf, SN ~ class)
head(df2)
mean(x)
tracebacK()
install.packages("traceback")
mean(x)
traceback()
debug(lm)
lm(y~x)
m
options(error = recover)
read.csv("nosuchfile")
library(datasets)
data(iris)
?iris
names(iris)
summary(iris)
tapply(Sepal.Length, Species, mean)
exit
0
0
0
exit
tapply(Sepal.Length, Species, mean)
Q
q
Q
q
c
Q
q
d<-data(iris)
summary(d)
str(d)
iris
summary(iris)
head(iris$Sepal.Length)
tapply(iris$Sepal.Length, iris$Species=="virginica", mean)
tapply(iris$Sepal.Length, iris$Species, mean)
colMeans(iris)
colMeans(iris)
colMeans(iris)
ls()
library(datasets)
data(iris)
ls()
tapply(iris$Sepal.Length, iris$Species, mean)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
apply(iris, 1, mean)
colMeans(iris)
library(datasets)
data(mtcars)
ls()
names(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
h<-sapply(split(mtcars$hp, mtcars$cyl), mean)
h[1]-h[3]
debug(ls0)
debug(ls)
ls()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
v<-makeVector()
v
v(5)
v<-makeVector(5)
v
summary(v)
v$set
v$set(4)
v$get()
v$set(c(1,2,3,4,5,6,7,8,9,10))
v$get
v$get()
v$set(20:40)
v$get()
cachemean(v)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(v)
cachemean(v)
v$set(c(23,23,34.6,654.35))
v$get()
cachemean(v)
cachemean(v)
setwd("~/ProgrammingAssignment2")
source('~/ProgrammingAssignment2/cachematrix.R')
m<- makeCacheMatrix( )
m$set( matrix( c(0, 2, 2, 0 ), 2, 2))
m$get()
cacheSolve( m )
m$getinv()
m$setinv()
m$get()
solve(m$get())
m$setinv(solve(m$get()))
m$getinv()
m$get()
cacheSolve( m )
source('~/ProgrammingAssignment2/cachematrix.R')
m<- makeCacheMatrix( )
m$set( matrix( c(0, 2, 2, 0 ), 2, 2))
m$get()
cacheSolve( m )
cacheSolve( m )
source('~/ProgrammingAssignment2/cachematrix.R')
cacheSolve( m )
m$set( matrix( c(0, 2, 2, 0 ), 2, 2))
cacheSolve( m )
source('~/ProgrammingAssignment2/cachematrix.R')
seq<-c(2,0,0,2)
matI<-matrix(seq2I,2)
matI<-matrix(seq,2)
a<-makeCacheMatrix(matI)
a$get()
a$getinv()
a$set()
a$setinv()
d<-cacheSolve(a)
a$setinv()
source('~/ProgrammingAssignment2/cachematrix.R')
a<-makeCacheMatrix(matI)
a$get()
cacheSolve(a)
a$getinv()
source('~/ProgrammingAssignment2/cachematrix.R')
source('~/ProgrammingAssignment2/cachematrix.R')
a<-makeCacheMatrix(matI)
a$get()
cacheSolve(a)
source('~/ProgrammingAssignment2/cachematrix.R')
a<-makeCacheMatrix(matI)
a$get()
cacheSolve(a)
a$setinv()
source('~/ProgrammingAssignment2/cachematrix.R')
a<-makeCacheMatrix(matI)
a$get()
cacheSolve(a)
source('~/ProgrammingAssignment2/cachematrix.R')
a<-makeCacheMatrix()
a$get()
m<- makeCacheMatrix( )
m$set( matrix( c(0, 2, 2, 0 ), 2, 2))
m$get()cacheSolve( m )
$get()
m$get()
cacheSolve(m)
source('~/ProgrammingAssignment2/cachematrix.R')
source('~/ProgrammingAssignment2/cachematrix.R')
m<- makeCacheMatrix( )
m$set( matrix( c(0, 2, 2, 0 ), 2, 2))
m$get()
cacheSolve( m )
cacheSolve( m )
source('~/ProgrammingAssignment2/cachematrix.R')
